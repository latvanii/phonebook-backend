{"version":3,"sources":["services/persons.js","components/notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","person_id","url","delete","person_data","id","put","Notification","message","isError","className","NewPersonForm","handleNameChange","handleNumberChange","addPerson","onSubmit","onChange","type","SearchForm","handleSearchTermChange","App","useState","persons","setPersons","useEffect","personService","initialPersons","newName","setNewName","newNumber","setNewNumber","newSearchTerm","setSearchTerm","notificationMessage","setNotificationMessage","notificationMessageIsError","setNotificationMessageIsError","PersonRow","props","name","number","onClick","window","confirm","console","log","event","target","value","preventDefault","map","person","includes","person_to_be_replaced","filter","catch","error","max_id","Math","max","concat","toLowerCase","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73492254.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (person_id) => {\n  const url = `${baseUrl}/${person_id}`\n  const request = axios.delete(url)\n  return request.then(response => response.data)\n}\n\nconst update = (person_data) => {\n  const url = `${baseUrl}/${person_data.id}`\n  const request = axios.put(url, person_data)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, deletePerson, update }","import React from 'react'\n\nconst Notification = ({ message, isError}) => {\n    if (message === null) {\n        return null\n    }\n    let className='notification'\n\n    if (isError){\n        className='error'\n    }\n\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Notification from './components/notification'\n\nconst NewPersonForm = ({ handleNameChange, handleNumberChange, addPerson }) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>name: <input\n        onChange={handleNameChange}\n      />\n      </div>\n      <div>number: <input\n        onChange={handleNumberChange}\n      />\n      </div>\n      <button type=\"submit\">add</button>\n    </form>\n\n  )\n}\n\nconst SearchForm = ({ handleSearchTermChange }) => {\n  return (\n    <form>\n      <div>searching: <input\n        onChange={handleSearchTermChange}\n      />\n      </div>\n    </form>\n  )\n}\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n\n\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newSearchTerm, setSearchTerm] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [notificationMessageIsError, setNotificationMessageIsError] = useState(null)\n\n  const findByName = (name) => {\n    const filtered_persons = persons.filter(person => person.name === name)\n    return filtered_persons[0]\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (persons.map(person => person.name).includes(newName)) {\n      const result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n      if (result) {\n        const person_to_be_replaced = findByName(newName)\n        person_to_be_replaced.number = newNumber\n        personService\n          .update(person_to_be_replaced)\n          .then(data => {\n            personService\n              .getAll()\n              .then(initialPersons => setPersons(initialPersons))\n            setNewName('')\n            setNewNumber('')\n            setNotificationMessage(`Number of ${newName} updated successfully`)\n            setNotificationMessageIsError(false)\n          })\n          .catch(error => {\n            setNotificationMessage(`There was a problem in adding ${newName} to phonebook`)\n            setNotificationMessageIsError(true)\n          })\n\n      }\n      return\n    }\n\n    const max_id = Math.max(persons.map(person => person.id))\n\n    const personObject = {\n      name: newName,\n      id: max_id - 1,\n      number: newNumber\n    }\n\n    personService\n      .create(personObject)\n      .then(data => {\n        setPersons(persons.concat(data))\n        setNewName('')\n        setNewNumber('')\n        setNotificationMessage(`${newName} added successfully`)\n        setNotificationMessageIsError(false)\n      })\n      .catch(error => {\n        console.log(error)\n        console.log('fail')\n        setNotificationMessage(`There was a problem in adding ${newName} to phonebook`)\n        setNotificationMessageIsError(true)\n      })\n  }\n\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchTermChange = (event) => {\n    setSearchTerm(event.target.value)\n  }\n\n  const removePerson = (person_id, name) => {\n    const result = window.confirm(`Remove person ${name}`)\n    if (result) {\n      personService\n        .deletePerson(person_id)\n        .then(data => {\n          console.log('removed')\n          console.log(data)\n          personService\n            .getAll()\n            .then(initialPersons => setPersons(initialPersons))\n          setNotificationMessage(`${name} removed successfully`)\n          setNotificationMessageIsError(false)\n        }\n        )\n    }\n  }\n\n  const PersonRow = (props) => {\n    return (\n      <div>\n        {props.name}: {props.number} <button onClick={() => removePerson(props.id, props.name)}>remove</button>\n      </div>\n    )\n  }\n\n\n  const Persons = () => {\n    const filtered_persons = persons.filter(person => person.name.toLowerCase().includes(newSearchTerm.toLowerCase()))\n    return (\n      filtered_persons.map(person =>\n        <PersonRow\n          key={person.name}\n          name={person.name}\n          number={person.number}\n          id={person.id}\n        />\n      )\n    )\n  }\n\n  return (\n    <div>\n      <Notification message={notificationMessage} isError={notificationMessageIsError} />\n      <h2>Phonebook</h2>\n      <NewPersonForm handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} addPerson={addPerson} />\n      <h2>Numbers</h2>\n      <SearchForm handleSearchTermChange={handleSearchTermChange} />\n      <Persons />\n\n    </div>\n  )\n\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}